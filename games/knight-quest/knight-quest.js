// ========================================
// KNIGHT QUEST - JUEGO COMPLETO INDEPENDIENTE
// Recorre todas las casillas del tablero con el caballo
// Versi√≥n: 1.0.0 - Totalmente autocontenido
// ========================================

// ========================================
// CONFIGURACI√ìN DEL JUEGO
// ========================================
const KNIGHT_CONFIG = {
    name: 'knight-quest',
    version: '1.0.0',
    maxScore: 10000,
    difficulties: {
        beginner: { size: 4, hints: 99, name: 'Principiante' },
        intermediate: { size: 6, hints: 5, name: 'Intermedio' },
        advanced: { size: 8, hints: 3, name: 'Avanzado' },
        expert: { size: 8, hints: 0, name: 'Experto' }
    },
    scoring: {
        basePerSquare: 10,
        timeBonus: 5,
        hintPenalty: 50,
        undoPenalty: 25,
        difficultyMultiplier: {
            beginner: 1,
            intermediate: 1.5,
            advanced: 2,
            expert: 3
        }
    }
};

// ========================================
// ESTADO DEL JUEGO
// ========================================
let gameState = {
    isPlaying: false,
    isPaused: false,
    board: [],
    boardSize: 4,
    currentPos: null,
    visitedSquares: new Set(),
    moveHistory: [],
    possibleMoves: [],
    startTime: null,
    gameTimer: null,
    difficulty: 'beginner',
    hintsLeft: 99,
    hintsUsed: 0,
    undosUsed: 0,
    score: 0,
    moveCount: 0,
    gameId: null
};

// Movimientos del caballo (L-shaped)
const KNIGHT_MOVES = [
    [-2, -1], [-2, 1], [-1, -2], [-1, 2],
    [1, -2], [1, 2], [2, -1], [2, 1]
];

// ========================================
// INICIALIZACI√ìN DEL JUEGO
// ========================================
function initGame() {
    console.log(`Inicializando ${KNIGHT_CONFIG.name} v${KNIGHT_CONFIG.version}`);
    
    // Crear tablero inicial
    createBoard();
    
    // Configurar UI inicial
    setupUI();
    
    // Bind eventos
    bindEvents();
    
    // Cargar configuraci√≥n guardada
    loadSettings();
    
    // Actualizar display
    updateUI();
    
    console.log('Knight Quest inicializado correctamente');
}

// ========================================
// CREACI√ìN Y MANEJO DEL TABLERO
// ========================================
function createBoard() {
    const board = document.getElementById('chessboard');
    board.innerHTML = '';
    
    // Configurar tama√±o del tablero
    const size = gameState.boardSize;
    board.className = `chessboard size-${size}x${size}`;
    
    // Inicializar array del tablero
    gameState.board = Array(size * size).fill(null);
    
    // Crear casillas
    for (let row = 0; row < size; row++) {
        for (let col = 0; col < size; col++) {
            const square = document.createElement('div');
            const index = row * size + col;
            
            square.className = `square ${(row + col) % 2 === 0 ? 'light' : 'dark'}`;
            square.dataset.index = index;
            square.dataset.row = row;
            square.dataset.col = col;
            
            // Event listener para clicks
            square.addEventListener('click', () => handleSquareClick(index));
            
            board.appendChild(square);
        }
    }
}

function handleSquareClick(targetIndex) {
    if (!gameState.isPlaying || gameState.isPaused) return;
    
    // Primer movimiento - colocar caballo
    if (gameState.currentPos === null) {
        placeKnight(targetIndex);
        return;
    }
    
    // Verificar si es un movimiento v√°lido
    if (!gameState.possibleMoves.includes(targetIndex)) {
        // Movimiento inv√°lido
        showError('¬°Movimiento inv√°lido! El caballo se mueve en forma de L.');
        animateError(targetIndex);
        ChessArcade.playSound('error');
        return;
    }
    
    // Hacer el movimiento
    makeMove(targetIndex);
}

function placeKnight(position) {
    gameState.currentPos = position;
    gameState.visitedSquares.add(position);
    gameState.moveHistory.push(position);
    gameState.board[position] = gameState.moveHistory.length;
    gameState.startTime = Date.now();
    
    // Iniciar timer
    startGameTimer();
    
    // Actualizar UI
    updateBoard();
    updatePossibleMoves();
    updateUI();
    updateGameTips('¬°Excelente! Ahora mueve el caballo a una casilla v√°lida.');
    
    ChessArcade.playSound('move');
}

function makeMove(targetIndex) {
    // Verificar si ya fue visitada
    if (gameState.visitedSquares.has(targetIndex)) {
        showError('¬°Ya visitaste esa casilla!');
        animateError(targetIndex);
        ChessArcade.playSound('error');
        return;
    }
    
    // Realizar movimiento
    gameState.currentPos = targetIndex;
    gameState.visitedSquares.add(targetIndex);
    gameState.moveHistory.push(targetIndex);
    gameState.board[targetIndex] = gameState.moveHistory.length;
    gameState.moveCount++;
    
    // Actualizar UI
    updateBoard();
    updatePossibleMoves();
    updateUI();
    
    // Verificar victoria
    const totalSquares = gameState.boardSize * gameState.boardSize;
    if (gameState.visitedSquares.size === totalSquares) {
        setTimeout(() => completeQuest(), 500);
    } else {
        // Verificar si hay movimientos posibles
        if (gameState.possibleMoves.length === 0) {
            setTimeout(() => gameOver(false), 500);
        } else {
            updateGameTips(getRandomTip());
        }
    }
    
    ChessArcade.playSound('move');
    updateScore();
}

// ========================================
// L√ìGICA DEL CABALLO
// ========================================
function isValidKnightMove(from, to) {
    const size = gameState.boardSize;
    const fromRow = Math.floor(from / size);
    const fromCol = from % size;
    const toRow = Math.floor(to / size);
    const toCol = to % size;
    
    const rowDiff = Math.abs(toRow - fromRow);
    const colDiff = Math.abs(toCol - fromCol);
    
    return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);
}

function getPossibleMoves(pos) {
    const size = gameState.boardSize;
    const row = Math.floor(pos / size);
    const col = pos % size;
    const moves = [];
    
    KNIGHT_MOVES.forEach(([dRow, dCol]) => {
        const newRow = row + dRow;
        const newCol = col + dCol;
        
        if (newRow >= 0 && newRow < size && newCol >= 0 && newCol < size) {
            const newPos = newRow * size + newCol;
            if (!gameState.visitedSquares.has(newPos)) {
                moves.push(newPos);
            }
        }
    });
    
    return moves;
}

function updatePossibleMoves() {
    if (gameState.currentPos !== null) {
        gameState.possibleMoves = getPossibleMoves(gameState.currentPos);
    } else {
        gameState.possibleMoves = [];
    }
}

// ========================================
// ALGORITMO DE WARNSDORFF (PISTAS)
// ========================================
function getBestMoveWarnsdorff(position) {
    const possibleMoves = getPossibleMoves(position);
    if (possibleMoves.length === 0) return null;
    
    let bestMove = possibleMoves[0];
    let fewestOnward = Infinity;
    
    possibleMoves.forEach(move => {
        const onwardMoves = getPossibleMoves(move).length;
        if (onwardMoves < fewestOnward) {
            fewestOnward = onwardMoves;
            bestMove = move;
        }
    });
    
    return bestMove;
}

function getHint() {
    if (gameState.hintsLeft <= 0) {
        showError('¬°No tienes pistas restantes!');
        ChessArcade.playSound('error');
        return;
    }
    
    if (gameState.currentPos === null) {
        showError('¬°Primero coloca el caballo en el tablero!');
        ChessArcade.playSound('error');
        return;
    }
    
    const bestMove = getBestMoveWarnsdorff(gameState.currentPos);
    if (bestMove === null) {
        showError('¬°No hay movimientos posibles!');
        ChessArcade.playSound('error');
        return;
    }
    
    // Resaltar la mejor jugada
    const squares = document.querySelectorAll('.square');
    const hintSquare = squares[bestMove];
    
    hintSquare.classList.add('knight-hint');
    setTimeout(() => {
        hintSquare.classList.remove('knight-hint');
    }, 2000);
    
    gameState.hintsLeft--;
    gameState.hintsUsed++;
    updateUI();
    
    showSuccess(`üí° ¬°Pista! La mejor casilla es ${getSquareName(bestMove)}`);
    ChessArcade.playSound('success');
}

// ========================================
// CONTROL DE JUEGO
// ========================================
function startGame() {
    if (gameState.isPlaying) {
        newGame();
        return;
    }
    
    newGame();
}

function newGame() {
    // Reset estado
    resetGameState();
    
    // Recrear tablero
    createBoard();
    
    // Actualizar UI
    updateBoard();
    updateUI();
    updateGameTips('¬°Haz clic en cualquier casilla para comenzar tu aventura!');
    
    // Cambiar texto del bot√≥n
    document.getElementById('startBtn').textContent = 'üîÑ REINICIAR';
    
    ChessArcade.playSound('click');
    
    console.log('Nuevo juego iniciado');
}

function resetGame() {
    if (confirm('¬øEst√°s seguro de que quieres reiniciar el juego?')) {
        newGame();
    }
}

function pauseGame() {
    if (!gameState.isPlaying) return;
    
    gameState.isPaused = !gameState.isPaused;
    
    if (gameState.isPaused) {
        clearInterval(gameState.gameTimer);
        showWarning('‚è∏Ô∏è Juego pausado. Presiona ESC para continuar.');
    } else {
        startGameTimer();
        updateGameTips('¬°Continuando el juego!');
    }
}

function resetGameState() {
    // Limpiar timer anterior
    if (gameState.gameTimer) {
        clearInterval(gameState.gameTimer);
    }
    
    const difficulty = gameState.difficulty;
    const config = KNIGHT_CONFIG.difficulties[difficulty];
    
    gameState = {
        isPlaying: true,
        isPaused: false,
        board: [],
        boardSize: config.size,
        currentPos: null,
        visitedSquares: new Set(),
        moveHistory: [],
        possibleMoves: [],
        startTime: null,
        gameTimer: null,
        difficulty: difficulty,
        hintsLeft: config.hints,
        hintsUsed: 0,
        undosUsed: 0,
        score: 0,
        moveCount: 0,
        gameId: Date.now()
    };
}

function undoMove() {
    if (gameState.moveHistory.length <= 1) {
        showError('¬°No hay movimientos para deshacer!');
        ChessArcade.playSound('error');
        return;
    }
    
    // Remover √∫ltimo movimiento
    const lastPos = gameState.moveHistory.pop();
    gameState.visitedSquares.delete(lastPos);
    gameState.board[lastPos] = null;
    gameState.undosUsed++;
    
    // Actualizar posici√≥n actual
    if (gameState.moveHistory.length > 0) {
        gameState.currentPos = gameState.moveHistory[gameState.moveHistory.length - 1];
    } else {
        gameState.currentPos = null;
        gameState.isPlaying = false;
        clearInterval(gameState.gameTimer);
    }
    
    // Actualizar UI
    updateBoard();
    updatePossibleMoves();
    updateUI();
    updateScore();
    
    showWarning('‚Ü©Ô∏è Movimiento deshecho');
    ChessArcade.playSound('click');
}

// ========================================
// DIFICULTAD
// ========================================
function changeDifficulty() {
    const select = document.getElementById('difficultySelect');
    const newDifficulty = select.value;
    
    if (gameState.isPlaying && gameState.moveHistory.length > 0) {
        if (!confirm('¬øCambiar dificultad reiniciar√° el juego actual. ¬øContinuar?')) {
            select.value = gameState.difficulty;
            return;
        }
    }
    
    gameState.difficulty = newDifficulty;
    const config = KNIGHT_CONFIG.difficulties[newDifficulty];
    
    // Actualizar UI
    document.getElementById('levelCount').textContent = config.name;
    
    // Guardar preferencia
    localStorage.setItem('knight_quest_difficulty', newDifficulty);
    
    // Reiniciar juego si estaba en progreso
    if (gameState.isPlaying) {
        newGame();
    } else {
        resetGameState();
        createBoard();
        updateUI();
    }
    
    showSuccess(`üéØ Dificultad cambiada a ${config.name}`);
}

// ========================================
// PUNTUACI√ìN
// ========================================
function calculateScore() {
    const config = KNIGHT_CONFIG.scoring;
    const difficulty = KNIGHT_CONFIG.difficulties[gameState.difficulty];
    
    // Puntos base por casillas visitadas
    let score = gameState.visitedSquares.size * config.basePerSquare;
    
    // Bonus por tiempo (menos tiempo = m√°s puntos)
    if (gameState.startTime) {
        const timeElapsed = Math.floor((Date.now() - gameState.startTime) / 1000);
        const timeBonus = Math.max(0, (300 - timeElapsed) * config.timeBonus); // 5 minutos max
        score += timeBonus;
    }
    
    // Penalty por pistas usadas
    score -= gameState.hintsUsed * config.hintPenalty;
    
    // Penalty por deshacer movimientos
    score -= gameState.undosUsed * config.undoPenalty;
    
    // Multiplicador por dificultad
    score *= config.difficultyMultiplier[gameState.difficulty];
    
    // Bonus por completar el juego
    const totalSquares = gameState.boardSize * gameState.boardSize;
    if (gameState.visitedSquares.size === totalSquares) {
        score += 1000 * config.difficultyMultiplier[gameState.difficulty];
    }
    
    return Math.max(0, Math.floor(score));
}

function updateScore() {
    gameState.score = calculateScore();
    document.getElementById('scoreCount').textContent = ChessArcade.formatScore(gameState.score);
}

// ========================================
// FINALIZACI√ìN DEL JUEGO
// ========================================
function completeQuest() {
    gameState.isPlaying = false;
    clearInterval(gameState.gameTimer);
    
    const finalScore = calculateScore();
    const timeElapsed = Math.floor((Date.now() - gameState.startTime) / 1000);
    
    // Guardar puntuaci√≥n
    const scoreData = {
        score: finalScore,
        time: timeElapsed,
        moves: gameState.moveCount,
        difficulty: gameState.difficulty,
        hintsUsed: gameState.hintsUsed,
        undosUsed: gameState.undosUsed,
        perfect: gameState.hintsUsed === 0 && gameState.undosUsed === 0
    };
    
    const result = ChessArcade.saveLocalScore(KNIGHT_CONFIG.name, finalScore, timeElapsed, gameState.difficulty, scoreData);
    
    // Verificar logros
    const newAchievements = ChessArcade.checkAchievements(KNIGHT_CONFIG.name, scoreData);
    
    // Mostrar modal de victoria
    showGameOverModal(true, scoreData, result, newAchievements);
    
    ChessArcade.playSound('victory');
    
    console.log('Quest completado:', scoreData);
}

function gameOver(won = false) {
    gameState.isPlaying = false;
    clearInterval(gameState.gameTimer);
    
    const finalScore = calculateScore();
    const timeElapsed = gameState.startTime ? Math.floor((Date.now() - gameState.startTime) / 1000) : 0;
    
    const scoreData = {
        score: finalScore,
        time: timeElapsed,
        moves: gameState.moveCount,
        difficulty: gameState.difficulty,
        hintsUsed: gameState.hintsUsed,
        undosUsed: gameState.undosUsed,
        perfect: false,
        completed: won
    };
    
    if (finalScore > 0) {
        ChessArcade.saveLocalScore(KNIGHT_CONFIG.name, finalScore, timeElapsed, gameState.difficulty, scoreData);
    }
    
    showGameOverModal(won, scoreData);
    
    ChessArcade.playSound(won ? 'victory' : 'error');
}

// ========================================
// ACTUALIZACI√ìN DE UI
// ========================================
function updateUI() {
    // Estad√≠sticas
    document.getElementById('moveCount').textContent = gameState.moveCount;
    document.getElementById('visitedCount').textContent = gameState.visitedSquares.size;
    document.getElementById('levelCount').textContent = KNIGHT_CONFIG.difficulties[gameState.difficulty].name;
    document.getElementById('hintsLeft').textContent = gameState.hintsLeft;
    
    // Progreso
    const totalSquares = gameState.boardSize * gameState.boardSize;
    const progress = (gameState.visitedSquares.size / totalSquares) * 100;
    document.getElementById('progressFill').style.width = `${progress}%`;
    document.getElementById('progressText').textContent = `${Math.floor(progress)}% completado`;
    
    // Botones
    document.getElementById('hintBtn').disabled = gameState.hintsLeft <= 0 || !gameState.isPlaying;
    document.getElementById('undoBtn').disabled = gameState.moveHistory.length <= 1 || !gameState.isPlaying;
    
    // Puntuaci√≥n
    updateScore();
}

function updateBoard() {
    const squares = document.querySelectorAll('.square');
    
    // Limpiar clases especiales
    squares.forEach(square => {
        square.className = square.className.split(' ').filter(c => 
            c === 'square' || c === 'light' || c === 'dark'
        ).join(' ');
        square.textContent = '';
    });
    
    // Marcar casillas visitadas
    gameState.visitedSquares.forEach((index, i) => {
        if (index !== gameState.currentPos) {
            squares[index].classList.add('knight-visited');
            squares[index].textContent = gameState.board[index];
        }
    });
    
    // Marcar posici√≥n actual
    if (gameState.currentPos !== null) {
        squares[gameState.currentPos].classList.add('knight-current');
        squares[gameState.currentPos].textContent = '‚ôò';
    }
    
    // Marcar movimientos posibles
    gameState.possibleMoves.forEach(index => {
        squares[index].classList.add('knight-possible');
    });
}

function updateTimer() {
    if (gameState.startTime && !gameState.isPaused) {
        const elapsed = Math.floor((Date.now() - gameState.startTime) / 1000);
        document.getElementById('timeCount').textContent = ChessArcade.formatTime(elapsed);
    }
}

function startGameTimer() {
    gameState.gameTimer = setInterval(updateTimer, 1000);
}

// ========================================
// MENSAJES Y NOTIFICACIONES
// ========================================
function updateGameTips(message) {
    document.getElementById('gameTips').innerHTML = `<p>üí° <strong>Consejo:</strong> ${message}</p>`;
}

function showSuccess(message) {
    updateStatusPanel(message, 'success');
}

function showWarning(message) {
    updateStatusPanel(message, 'warning');
}

function showError(message) {
    updateStatusPanel(message, 'error');
}

function updateStatusPanel(message, type = 'info') {
    const panel = document.getElementById('statusPanel');
    const messageEl = document.getElementById('statusMessage');
    
    panel.className = `status-panel ${type}`;
    messageEl.textContent = message;
    
    // Auto-clear despu√©s de 3 segundos
    setTimeout(() => {
        if (panel.className.includes(type)) {
            panel.className = 'status-panel';
            messageEl.textContent = 'Mueve el caballo por todas las casillas del tablero.';
        }
    }, 3000);
}

function animateError(squareIndex) {
    const squares = document.querySelectorAll('.square');
    const square = squares[squareIndex];
    square.classList.add('knight-error');
    setTimeout(() => {
        square.classList.remove('knight-error');
    }, 500);
}

// ========================================
// MODALES
// ========================================
function showGameOverModal(won, scoreData, result = null, achievements = []) {
    const modal = document.getElementById('gameOverModal');
    const title = document.getElementById('gameOverTitle');
    const statsContainer = document.getElementById('finalStats');
    const achievementsContainer = document.getElementById('achievementShowcase');
    
    // T√≠tulo
    title.textContent = won ? 'üèÜ ¬°KNIGHT QUEST COMPLETADO!' : '‚öîÔ∏è QUEST TERMINADO';
    
    // Estad√≠sticas finales
    statsContainer.innerHTML = `
        <div class="stat-item">
            <span class="stat-value">${ChessArcade.formatScore(scoreData.score)}</span>
            <span class="stat-label">Puntuaci√≥n Final</span>
        </div>
        <div class="stat-item">
            <span class="stat-value">${ChessArcade.formatTime(scoreData.time)}</span>
            <span class="stat-label">Tiempo Total</span>
        </div>
        <div class="stat-item">
            <span class="stat-value">${scoreData.moves}</span>
            <span class="stat-label">Movimientos</span>
        </div>
        <div class="stat-item">
            <span class="stat-value">${gameState.visitedSquares.size}/${gameState.boardSize * gameState.boardSize}</span>
            <span class="stat-label">Casillas Visitadas</span>
        </div>
        <div class="stat-item">
            <span class="stat-value">${scoreData.hintsUsed}</span>
            <span class="stat-label">Pistas Usadas</span>
        </div>
        <div class="stat-item">
            <span class="stat-value">${KNIGHT_CONFIG.difficulties[gameState.difficulty].name}</span>
            <span class="stat-label">Dificultad</span>
        </div>
    `;
    
    // Mostrar logros desbloqueados
    if (achievements.length > 0) {
        achievementsContainer.innerHTML = achievements.map(achievement => 
            `<div class="achievement-badge">
                <span>${achievement.icon}</span>
                <span>${achievement.name}</span>
            </div>`
        ).join('');
    } else {
        achievementsContainer.innerHTML = '';
    }
    
    // Mostrar modal
    modal.style.display = 'flex';
    setTimeout(() => modal.classList.add('show'), 100);
}

function closeGameOverModal() {
    const modal = document.getElementById('gameOverModal');
    modal.classList.remove('show');
    setTimeout(() => modal.style.display = 'none', 300);
}

function showLeaderboard() {
    const modal = document.getElementById('leaderboardModal');
    modal.style.display = 'flex';
    setTimeout(() => modal.classList.add('show'), 100);
    
    // Cargar leaderboard por defecto
    showLeaderboardTab('all');
}

function closeLeaderboardModal() {
    const modal = document.getElementById('leaderboardModal');
    modal.classList.remove('show');
    setTimeout(() => modal.style.display = 'none', 300);
}

function showLeaderboardTab(tab) {
    // Actualizar tabs
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    const content = document.getElementById('leaderboardContent');
    const scores = ChessArcade.getLocalLeaderboard(KNIGHT_CONFIG.name, 20);
    
    if (scores.length === 0) {
        content.innerHTML = `
            <div class="empty-leaderboard">
                <div class="empty-icon">üèÜ</div>
                <p>¬°A√∫n no hay puntuaciones!</p>
                <p>¬°S√© el primero en completar Knight Quest!</p>
            </div>
        `;
        return;
    }
    
    // Filtrar seg√∫n tab
    let filteredScores = scores;
    if (tab === 'today') {
        const today = new Date().toDateString();
        filteredScores = scores.filter(score => 
            new Date(score.date).toDateString() === today
        );
    }
    
    if (filteredScores.length === 0 && tab === 'today') {
        content.innerHTML = `
            <div class="empty-leaderboard">
                <div class="empty-icon">üìÖ</div>
                <p>¬°No hay puntuaciones de hoy!</p>
                <p>¬°Juega una partida para aparecer aqu√≠!</p>
            </div>
        `;
        return;
    }
    
    // Generar lista
    content.innerHTML = `
        <div class="leaderboard-list">
            ${filteredScores.map((score, index) => `
                <div class="leaderboard-item ${tab === 'personal' ? 'personal' : ''}">
                    <div class="rank ${index === 0 ? 'first' : index === 1 ? 'second' : index === 2 ? 'third' : ''}">#${index + 1}</div>
                    <div class="player-info">
                        <div class="player-name">Jugador ${score.id.toString().slice(-4)}</div>
                        <div class="player-details">
                            ${score.difficulty} ‚Ä¢ ${score.moves} movimientos 
                            ${score.perfect ? '‚Ä¢ ‚≠ê Perfecto' : ''}
                        </div>
                    </div>
                    <div class="score-info">
                        <div class="score">${ChessArcade.formatScore(score.score)}</div>
                        <div class="time">${ChessArcade.formatTime(score.time)}</div>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

function showHelp() {
    const modal = document.getElementById('helpModal');
    modal.style.display = 'flex';
    setTimeout(() => modal.classList.add('show'), 100);
}

function closeHelpModal() {
    const modal = document.getElementById('helpModal');
    modal.classList.remove('show');
    setTimeout(() => modal.style.display = 'none', 300);
}

// ========================================
// UTILIDADES
// ========================================
function getSquareName(index) {
    const size = gameState.boardSize;
    const row = Math.floor(index / size);
    const col = index % size;
    const file = String.fromCharCode(65 + col); // A, B, C...
    const rank = size - row; // 1, 2, 3...
    return `${file}${rank}`;
}

function getRandomTip() {
    const tips = [
        'El caballo es la √∫nica pieza que puede saltar sobre otras.',
        'Intenta moverte hacia las esquinas y bordes primero.',
        'Planifica varios movimientos por adelantado.',
        'Las casillas con menos salidas son m√°s dif√≠ciles de alcanzar.',
        '¬°Usa las pistas sabiamente para obtener mejor puntuaci√≥n!',
        'Un patr√≥n en espiral puede ser √∫til en algunos casos.',
        'Las casillas centrales tienen m√°s opciones de movimiento.',
        '¬°La pr√°ctica hace al maestro del ajedrez!',
        'Cada casilla visitada suma puntos a tu puntuaci√≥n.',
        '¬°Completa sin pistas para obtener el m√°ximo bonus!'
    ];
    
    return tips[Math.floor(Math.random() * tips.length)];
}

function loadSettings() {
    // Cargar dificultad guardada
    const savedDifficulty = localStorage.getItem('knight_quest_difficulty');
    if (savedDifficulty && KNIGHT_CONFIG.difficulties[savedDifficulty]) {
        gameState.difficulty = savedDifficulty;
        document.getElementById('difficultySelect').value = savedDifficulty;
        
        const config = KNIGHT_CONFIG.difficulties[savedDifficulty];
        document.getElementById('levelCount').textContent = config.name;
    }
}

function setupUI() {
    // Configurar bot√≥n de sonido inicial
    const soundBtn = document.getElementById('soundBtn');
    soundBtn.textContent = ChessArcade.soundEnabled ? 'üîä' : 'üîá';
}

// ========================================
// EVENT LISTENERS
// ========================================
function bindEvents() {
    // Teclas de acceso r√°pido
    document.addEventListener('keydown', handleKeyPress);
    
    // Cerrar modales con escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            // Cerrar modales abiertos
            const modals = document.querySelectorAll('.modal-overlay.show');
            if (modals.length > 0) {
                modals.forEach(modal => {
                    if (modal.id === 'gameOverModal') closeGameOverModal();
                    if (modal.id === 'leaderboardModal') closeLeaderboardModal();
                    if (modal.id === 'helpModal') closeHelpModal();
                });
            } else if (gameState.isPlaying) {
                // Pausar/reanudar juego
                pauseGame();
            }
        }
    });
    
    // Prevenir menu contextual en tablero
    document.getElementById('chessboard').addEventListener('contextmenu', e => e.preventDefault());
}

function handleKeyPress(event) {
    if (!gameState.isPlaying) return;
    
    switch(event.key.toLowerCase()) {
        case 'h':
            event.preventDefault();
            getHint();
            break;
        case 'u':
            event.preventDefault();
            undoMove();
            break;
        case 'n':
            if (event.ctrlKey) {
                event.preventDefault();
                newGame();
            }
            break;
        case 'r':
            if (event.ctrlKey) {
                event.preventDefault();
                resetGame();
            }
            break;
    }
}

// ========================================
// FUNCIONES GLOBALES PARA HTML
// ========================================
function toggleSound() {
    ChessArcade.toggleGameSound();
    setupUI();
}

// ========================================
// FUNCI√ìN: Go Home (volver a ChessArcade)
// ========================================
function goHome() {
    console.log('üè† Volviendo a ChessArcade...');
    window.location.href = '../../index.html';
}

// ========================================
// INICIALIZACI√ìN AUTOM√ÅTICA
// ========================================
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, inicializando Knight Quest...');

    // Configurar event listeners para botones HOME y SOUND PRIMERO
    // Usar try-catch para asegurar que se registren incluso si hay errores
    try {
        const btnHome = document.getElementById('btnHome');
        const btnSound = document.getElementById('btnSound');

        if (btnHome) {
            console.log('‚úÖ HOME button encontrado, agregando listener');
            btnHome.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('üè† HOME clicked!');
                goHome();
            });
        } else {
            console.error('‚ùå HOME button NO encontrado');
        }

        if (btnSound) {
            console.log('‚úÖ SOUND button encontrado, agregando listener');
            btnSound.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('üîä SOUND clicked!');
                toggleSound();
            });
        } else {
            console.error('‚ùå SOUND button NO encontrado');
        }
    } catch (error) {
        console.error('‚ùå Error configurando botones:', error);
    }

    // Iniciar juego despu√©s de configurar listeners
    try {
        initGame();
    } catch (error) {
        console.error('‚ùå Error iniciando juego:', error);
    }
});

// Hacer funciones disponibles globalmente para los botones HTML
window.startGame = startGame;
window.newGame = newGame;
window.resetGame = resetGame;
window.getHint = getHint;
window.undoMove = undoMove;
window.changeDifficulty = changeDifficulty;
window.showLeaderboard = showLeaderboard;
window.closeLeaderboardModal = closeLeaderboardModal;
window.showLeaderboardTab = showLeaderboardTab;
window.closeGameOverModal = closeGameOverModal;
window.showHelp = showHelp;
window.closeHelpModal = closeHelpModal;
window.toggleSound = toggleSound;

console.log('Knight Quest v' + KNIGHT_CONFIG.version + ' cargado correctamente');