/**
 * Script de debugging para Memory Matrix Library Version
 * Ejecuta esto en la consola del navegador para diagnosticar problemas
 */

console.log('üîç INICIANDO DEBUGGING...');

// 1. Verificar carga de librer√≠as
console.log('üìö VERIFICANDO LIBRER√çAS:');
console.log('Chess.js:', typeof Chess !== 'undefined' ? '‚úÖ Cargado' : '‚ùå No cargado');
console.log('Chessground:', typeof Chessground !== 'undefined' ? '‚úÖ Cargado' : '‚ùå No cargado');
console.log('Howler:', typeof Howl !== 'undefined' ? '‚úÖ Cargado' : '‚ùå No cargado');
console.log('Memory Levels:', typeof MEMORY_LEVELS !== 'undefined' ? '‚úÖ Cargado' : '‚ùå No cargado');

// 2. Verificar elementos DOM
console.log('\nüéØ VERIFICANDO DOM:');
const boardElement = document.getElementById('chessboard');
console.log('Elemento tablero:', boardElement ? '‚úÖ Encontrado' : '‚ùå No encontrado');
if (boardElement) {
    console.log('Dimensiones:', boardElement.offsetWidth + 'x' + boardElement.offsetHeight);
    console.log('Estilos computados:', window.getComputedStyle(boardElement));
}

// 3. Test b√°sico de Chess.js
console.log('\n‚ôõ TEST CHESS.JS:');
if (typeof Chess !== 'undefined') {
    try {
        const testChess = new Chess();
        console.log('‚úÖ Chess.js funciona');
        console.log('FEN inicial:', testChess.fen());

        testChess.load('4k3/8/8/8/8/8/8/4K3 w - - 0 1');
        console.log('‚úÖ Load FEN funciona');
        console.log('Board:', testChess.board());
    } catch (error) {
        console.log('‚ùå Chess.js error:', error);
    }
} else {
    console.log('‚ùå Chess.js no disponible');
}

// 4. Test b√°sico de Chessground
console.log('\nüèÅ TEST CHESSGROUND:');
if (typeof Chessground !== 'undefined' && boardElement) {
    try {
        const testConfig = {
            coordinates: true,
            viewOnly: true,
            fen: '4k3/8/8/8/8/8/8/4K3 w - - 0 1'
        };

        const testBoard = Chessground(boardElement, testConfig);
        console.log('‚úÖ Chessground funciona');
        console.log('Estado del tablero:', testBoard.state);

        // Verificar que se crearon las casillas
        const squares = boardElement.querySelectorAll('.cg-square');
        console.log('Casillas creadas:', squares.length);

        if (squares.length === 0) {
            console.log('‚ùå No se crearon casillas');
        } else {
            console.log('‚úÖ Casillas creadas correctamente');
            console.log('Primera casilla:', squares[0]);
        }

    } catch (error) {
        console.log('‚ùå Chessground error:', error);
    }
} else {
    console.log('‚ùå Chessground no disponible o elemento no encontrado');
}

// 5. Verificar el juego principal
console.log('\nüéÆ VERIFICANDO JUEGO:');
if (window.memoryGame) {
    console.log('‚úÖ Instancia del juego encontrada');
    console.log('Estado:', window.memoryGame.gameState);
    console.log('Nivel actual:', window.memoryGame.currentLevel);
    console.log('Chess instance:', window.memoryGame.chessInstance);
    console.log('Chessground instance:', window.memoryGame.chessgroundInstance);
} else {
    console.log('‚ùå Instancia del juego no encontrada');
}

console.log('\nüîç DEBUGGING COMPLETADO');

// Funci√≥n helper para forzar re-inicializaci√≥n
window.debugReinit = function() {
    console.log('üîÑ Forzando re-inicializaci√≥n...');
    if (window.memoryGame) {
        window.memoryGame.initChessground();
    } else {
        console.log('‚ùå No hay instancia del juego para re-inicializar');
    }
};

console.log('üí° Tip: Ejecuta debugReinit() para forzar re-inicializaci√≥n del tablero');