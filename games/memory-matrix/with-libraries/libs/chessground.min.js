/*
 * Chessground - Simplified local version for Memory Matrix
 * Based on Chessground library
 */

(function() {
  'use strict';

  function Chessground(element, config) {
    var state = {
      pieces: new Map(),
      orientation: config.orientation || 'white',
      turnColor: config.turnColor || 'white',
      coordinates: config.coordinates !== false,
      viewOnly: config.viewOnly || false,
      fen: config.fen || null,
      movable: config.movable || {},
      selectable: config.selectable || {},
      draggable: config.draggable || {},
      events: config.events || {}
    };

    var dom = {
      container: element,
      board: null,
      squares: new Map()
    };

    function init() {
      element.innerHTML = '';
      element.className = 'cg-wrap';
      element.style.width = '100%';
      element.style.height = '100%';

      var container = document.createElement('div');
      container.className = 'cg-container';
      container.style.width = '100%';
      container.style.height = '100%';
      container.style.position = 'relative';
      element.appendChild(container);

      var board = document.createElement('div');
      board.className = 'cg-board';
      board.style.width = '100%';
      board.style.height = '100%';
      board.style.position = 'relative';
      board.style.background = '#f0d9b5'; // Color de fondo por defecto
      container.appendChild(board);

      dom.board = board;
      dom.container = container;

      // Force CSS styles with minimum height
      element.style.cssText = 'width: 100% !important; height: 100% !important; min-height: 400px !important; position: relative !important; display: block !important; background: #f0d9b5 !important;';
      container.style.cssText = 'width: 100% !important; height: 100% !important; min-height: 400px !important; position: relative !important; background: #f0d9b5 !important;';
      board.style.cssText = 'width: 100% !important; height: 100% !important; min-height: 400px !important; position: relative !important; background: #f0d9b5 !important;';

      // Force height on parent element too
      if (element.parentElement) {
        element.parentElement.style.height = '100%';
        element.parentElement.style.minHeight = '400px';
      }

      createSquares();

      if (state.coordinates) {
        addCoordinates();
      }

      if (state.fen) {
        setFen(state.fen);
      }

      render();

      console.log('üèÅ Chessground tablero creado con', dom.squares.size, 'casillas');
    }

    function createSquares() {
      var files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
      var ranks = state.orientation === 'white' ? ['8', '7', '6', '5', '4', '3', '2', '1'] : ['1', '2', '3', '4', '5', '6', '7', '8'];

      for (var r = 0; r < 8; r++) {
        for (var f = 0; f < 8; f++) {
          var square = files[f] + ranks[r];
          var squareEl = document.createElement('div');

          var isLight = (r + f) % 2 === 1;
          var bgColor = isLight ? '#f0d9b5' : '#b58863';
          var borderColor = isLight ? '#ddd' : '#999';

          squareEl.className = 'cg-square ' + (isLight ? 'light' : 'dark');
          // Calcular tama√±o en p√≠xeles para casillas cuadradas
          var parentWidth = dom.board.offsetWidth || 400;
          var parentHeight = dom.board.offsetHeight || 400;
          var squareSize = Math.min(parentWidth, parentHeight) / 8;

          squareEl.style.cssText = `
            position: absolute !important;
            width: ${squareSize}px !important;
            height: ${squareSize}px !important;
            transform: translate(${f * squareSize}px, ${r * squareSize}px) !important;
            background-color: ${bgColor} !important;
            border: 1px solid ${borderColor} !important;
            box-sizing: border-box !important;
            top: 0 !important;
            left: 0 !important;
          `;
          squareEl.dataset.square = square;

          // Add event listeners
          squareEl.addEventListener('click', function(e) {
            handleClick(e.target.dataset.square);
          });

          squareEl.addEventListener('dragover', function(e) {
            e.preventDefault();
          });

          squareEl.addEventListener('drop', function(e) {
            e.preventDefault();
            handleDrop(e.target.dataset.square);
          });

          dom.board.appendChild(squareEl);
          dom.squares.set(square, squareEl);
        }
      }
    }

    function addCoordinates() {
      var files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
      var ranks = ['8', '7', '6', '5', '4', '3', '2', '1']; // Invertir para que 8 est√© arriba

      var boardSize = Math.min(dom.board.offsetWidth, dom.board.offsetHeight) || 400;
      var squareSize = boardSize / 8;

      // Files (letras abajo)
      var filesEl = document.createElement('div');
      filesEl.className = 'cg-coords files';
      filesEl.style.cssText = `
        position: absolute;
        bottom: -20px;
        left: 0;
        width: ${boardSize}px;
        height: 16px;
        display: flex;
        z-index: 10;
      `;

      files.forEach(function(file, index) {
        var coord = document.createElement('div');
        coord.className = 'coord';
        coord.textContent = file;
        coord.style.cssText = `
          width: ${squareSize}px;
          height: 16px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 12px;
          color: #888;
          font-weight: bold;
        `;
        filesEl.appendChild(coord);
      });
      dom.container.appendChild(filesEl);

      // Ranks (n√∫meros a la izquierda)
      var ranksEl = document.createElement('div');
      ranksEl.className = 'cg-coords ranks';
      ranksEl.style.cssText = `
        position: absolute;
        left: -20px;
        top: 0;
        width: 16px;
        height: ${boardSize}px;
        display: flex;
        flex-direction: column;
        z-index: 10;
      `;

      ranks.forEach(function(rank, index) {
        var coord = document.createElement('div');
        coord.className = 'coord';
        coord.textContent = rank;
        coord.style.cssText = `
          width: 16px;
          height: ${squareSize}px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 12px;
          color: #888;
          font-weight: bold;
        `;
        ranksEl.appendChild(coord);
      });
      dom.container.appendChild(ranksEl);
    }

    function setFen(fen) {
      state.pieces.clear();

      var parts = fen.split(' ');
      var position = parts[0];
      var square = 0;
      var files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
      var ranks = ['8', '7', '6', '5', '4', '3', '2', '1'];

      for (var i = 0; i < position.length; i++) {
        var char = position[i];

        if (char === '/') {
          continue;
        } else if (isDigit(char)) {
          square += parseInt(char);
        } else {
          var file = square % 8;
          var rank = Math.floor(square / 8);
          var squareName = files[file] + ranks[rank];
          var color = char === char.toLowerCase() ? 'black' : 'white';
          var role = char.toLowerCase();

          state.pieces.set(squareName, {
            color: color,
            role: role
          });
          square++;
        }
      }
    }

    function isDigit(char) {
      return /^\d$/.test(char);
    }

    function render() {
      // Clear existing pieces
      dom.board.querySelectorAll('.cg-piece').forEach(function(el) {
        el.remove();
      });

      // Render pieces
      state.pieces.forEach(function(piece, square) {
        var squareEl = dom.squares.get(square);
        if (squareEl) {
          var pieceEl = document.createElement('div');
          pieceEl.className = `cg-piece ${piece.color} ${piece.role}`;
          pieceEl.draggable = !state.viewOnly;

          if (!state.viewOnly) {
            pieceEl.addEventListener('dragstart', function(e) {
              handleDragStart(e, square);
            });
          }

          squareEl.appendChild(pieceEl);
        }
      });
    }

    function handleClick(square) {
      if (state.events.click) {
        state.events.click(square);
      }
    }

    function handleDragStart(e, square) {
      e.dataTransfer.effectAllowed = 'move';
      e.dataTransfer.setData('text/plain', square);

      if (state.events.dragStart) {
        state.events.dragStart(square);
      }
    }

    function handleDrop(square) {
      if (state.events.drop) {
        state.events.drop(square);
      }
    }

    function setPieces(pieces) {
      state.pieces.clear();
      for (var square in pieces) {
        state.pieces.set(square, pieces[square]);
      }
      render();
    }

    function getFen() {
      var board = Array(8).fill(null).map(() => Array(8).fill(null));
      var files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];

      state.pieces.forEach(function(piece, square) {
        var file = files.indexOf(square[0]);
        var rank = 8 - parseInt(square[1]);
        board[rank][file] = piece;
      });

      var fen = '';
      for (var rank = 0; rank < 8; rank++) {
        var empty = 0;
        for (var file = 0; file < 8; file++) {
          if (board[rank][file]) {
            if (empty > 0) {
              fen += empty;
              empty = 0;
            }
            var piece = board[rank][file];
            var char = piece.role;
            if (piece.color === 'white') {
              char = char.toUpperCase();
            }
            fen += char;
          } else {
            empty++;
          }
        }
        if (empty > 0) {
          fen += empty;
        }
        if (rank < 7) {
          fen += '/';
        }
      }

      return fen + ' w - - 0 1';
    }

    function set(config) {
      if (config.fen) {
        setFen(config.fen);
        render();
      }
      if (config.viewOnly !== undefined) {
        state.viewOnly = config.viewOnly;
      }
      if (config.movable) {
        state.movable = config.movable;
      }
      if (config.orientation) {
        state.orientation = config.orientation;
      }
    }

    function setShapes(shapes) {
      // Remove existing shapes
      dom.board.querySelectorAll('.cg-shape').forEach(function(el) {
        el.remove();
      });

      // Add new shapes
      shapes.forEach(function(shape) {
        var squareEl = dom.squares.get(shape.orig);
        if (squareEl) {
          var shapeEl = document.createElement('div');
          shapeEl.className = `cg-shape ${shape.brush || 'green'}`;
          shapeEl.style.left = '20%';
          shapeEl.style.top = '20%';
          shapeEl.style.width = '60%';
          shapeEl.style.height = '60%';
          squareEl.appendChild(shapeEl);
        }
      });
    }

    // Initialize
    init();

    // Public API
    return {
      set: set,
      getFen: getFen,
      setShapes: setShapes,
      setPieces: setPieces,
      state: state
    };
  }

  // Export
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Chessground;
  } else if (typeof window !== 'undefined') {
    window.Chessground = Chessground;
  }
})();