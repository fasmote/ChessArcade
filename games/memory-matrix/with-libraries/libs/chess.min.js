/*
 * Chess.js - Simplified local version for Memory Matrix
 * Based on chess.js library
 */

(function() {
  'use strict';

  function Chess(fen) {
    var board = new Array(8);
    for (var i = 0; i < 8; i++) {
      board[i] = new Array(8);
    }

    var WHITE = 'w';
    var BLACK = 'b';

    var PIECES = {
      PAWN: 'p', ROOK: 'r', KNIGHT: 'n', BISHOP: 'b', QUEEN: 'q', KING: 'k'
    };

    var SYMBOLS = 'pnbrqkPNBRQK';

    var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';

    function clear() {
      for (var i = 0; i < 8; i++) {
        for (var j = 0; j < 8; j++) {
          board[i][j] = null;
        }
      }
    }

    function load(fen) {
      if (typeof fen !== 'string') {
        console.error('Chess.js load(): FEN debe ser una string, recibido:', typeof fen, fen);
        fen = DEFAULT_POSITION;
      }

      var tokens = fen.split(/\s+/);
      var position = tokens[0];
      var square = 0;

      clear();

      for (var i = 0; i < position.length; i++) {
        var piece = position.charAt(i);

        if (piece === '/') {
          continue;
        } else if (isDigit(piece)) {
          square += parseInt(piece, 10);
        } else {
          var color = (piece < 'a') ? WHITE : BLACK;
          put({type: piece.toLowerCase(), color: color}, algebraic(square));
          square++;
        }
      }
    }

    function isDigit(c) {
      return '0123456789'.indexOf(c) !== -1;
    }

    function algebraic(square) {
      var f = file(square);
      var r = rank(square);
      return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);
    }

    function file(square) {
      return square & 0x7;
    }

    function rank(square) {
      return square >> 4;
    }

    function squareToIndex(square) {
      var file = square.charCodeAt(0) - 'a'.charCodeAt(0);
      var rank = 8 - parseInt(square.charAt(1), 10);
      return rank * 8 + file;
    }

    function put(piece, square) {
      var index = squareToIndex(square);
      var rank = Math.floor(index / 8);
      var file = index % 8;
      board[rank][file] = piece;
      return piece;
    }

    function get(square) {
      var index = squareToIndex(square);
      var rank = Math.floor(index / 8);
      var file = index % 8;
      return board[rank][file];
    }

    function remove(square) {
      var piece = get(square);
      var index = squareToIndex(square);
      var rank = Math.floor(index / 8);
      var file = index % 8;
      board[rank][file] = null;
      return piece;
    }

    function fen() {
      var empty = 0;
      var fen = '';

      for (var i = 0; i < 8; i++) {
        for (var j = 0; j < 8; j++) {
          if (board[i][j] == null) {
            empty++;
          } else {
            if (empty > 0) {
              fen += empty;
              empty = 0;
            }
            var color = board[i][j].color;
            var piece = board[i][j].type;

            fen += (color === WHITE) ? piece.toUpperCase() : piece.toLowerCase();
          }
        }

        if (empty > 0) {
          fen += empty;
        }

        if (i < 7) {
          fen += '/';
        }

        empty = 0;
      }

      return fen + ' w - - 0 1';
    }

    // Initialize
    if (typeof fen === 'undefined' || fen === null) {
      load(DEFAULT_POSITION);
    } else {
      load(fen);
    }

    function boardArray() {
      return board;
    }

    return {
      load: load,
      fen: fen,
      get: get,
      put: put,
      remove: remove,
      clear: clear,
      board: boardArray
    };
  }

  // Export for use
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Chess;
  } else if (typeof window !== 'undefined') {
    window.Chess = Chess;
  }
})();