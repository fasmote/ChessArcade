<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Square Rush - ChessArcade</title>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap" rel="stylesheet">
    
    <!-- Google AdSense -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2472413468382197" crossorigin="anonymous"></script>
    
    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-N3EKXHPD5Y"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'G-N3EKXHPD5Y');
    </script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: linear-gradient(135deg, #0a0a0a 0%, #1a0033 50%, #330066 100%);
            color: white;
            font-family: 'Orbitron', monospace;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }
        
        /* Grid background effect */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: 
                linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            pointer-events: none;
            animation: gridMove 20s linear infinite;
            z-index: 0;
        }
        
        @keyframes gridMove {
            0% { transform: translate(0, 0); }
            100% { transform: translate(50px, 50px); }
        }
        
        .game-container {
            position: relative;
            z-index: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem;
            min-height: 100vh;
        }
        
        /* Sound Toggle Button */
        .sound-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #00ffff;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: #00ffff;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
        }
        
        .sound-toggle:hover {
            transform: scale(1.1);
            box-shadow: 0 0 30px rgba(0, 255, 255, 0.6);
            border-color: #00ff80;
            color: #00ff80;
        }
        
        .sound-toggle.muted {
            border-color: #ff0040;
            color: #ff0040;
            box-shadow: 0 0 20px rgba(255, 0, 64, 0.3);
        }
        
        .sound-toggle.muted:hover {
            box-shadow: 0 0 30px rgba(255, 0, 64, 0.6);
        }
        
        /* Header */
        .game-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .game-title {
            font-size: 2.5rem;
            font-weight: 900;
            letter-spacing: 0.2em;
            background: linear-gradient(45deg, #ff0080, #00ff80, #0080ff, #ff8000);
            background-size: 400% 400%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: gradientShift 3s ease-in-out infinite;
            text-shadow: 0 0 30px rgba(255, 0, 128, 0.5);
        }
        
        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        .game-subtitle {
            font-size: 1rem;
            color: #00ffff;
            margin-top: 0.5rem;
            letter-spacing: 0.1em;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        
        /* Game UI */
        .game-ui {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            max-width: 600px;
            margin-bottom: 1rem;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.7);
            border: 2px solid;
            border-image: linear-gradient(45deg, #ff0080, #00ff80) 1;
            border-radius: 10px;
        }
        
        .level-info {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .level-number {
            font-size: 2rem;
            font-weight: 900;
            color: #ff0080;
            text-shadow: 0 0 10px rgba(255, 0, 128, 0.5);
        }
        
        .level-name {
            font-size: 0.8rem;
            color: #00ffff;
            text-align: center;
        }
        
        .timer {
            font-size: 3rem;
            font-weight: 900;
            color: #00ff80;
            text-shadow: 0 0 20px rgba(0, 255, 128, 0.5);
            animation: pulse 1s ease-in-out infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        .score-info {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .score {
            font-size: 1.5rem;
            color: #ffd700;
            font-weight: 700;
        }
        
        .combo {
            font-size: 1rem;
            color: #ff8000;
            margin-top: 0.2rem;
        }
        
        /* Target coordinate display */
        .target-display {
            text-align: center;
            margin-bottom: 2rem;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.8);
            border: 3px solid #00ff80;
            border-radius: 15px;
            box-shadow: 0 0 30px rgba(0, 255, 128, 0.3);
        }
        
        .target-label {
            font-size: 1rem;
            color: #00ffff;
            margin-bottom: 0.5rem;
        }
        
        .target-coordinate {
            font-size: 4rem;
            font-weight: 900;
            color: #00ff80;
            text-shadow: 0 0 20px rgba(0, 255, 128, 0.8);
            animation: targetGlow 2s ease-in-out infinite;
        }
        
        @keyframes targetGlow {
            0%, 100% { text-shadow: 0 0 20px rgba(0, 255, 128, 0.8); }
            50% { text-shadow: 0 0 40px rgba(0, 255, 128, 1); }
        }
        
        /* Chess board */
        .board-container {
            position: relative;
            margin-bottom: 2rem;
        }
        
        .chess-board {
            display: grid;
            grid-template-columns: repeat(8, 60px);
            grid-template-rows: repeat(8, 60px);
            gap: 2px;
            border: 4px solid #00ffff;
            border-radius: 10px;
            box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
            background: #000;
        }
        
        .square {
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            font-weight: 900;
            font-size: 12px;
            border-radius: 5px;
        }
        
        .square.light {
            background: linear-gradient(135deg, #f0d9b5 0%, #e8c99f 100%);
            color: #8b4513;
        }
        
        .square.dark {
            background: linear-gradient(135deg, #b58863 0%, #a67c52 100%);
            color: #f0d9b5;
        }
        
        .square:hover {
            transform: scale(1.1);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
            z-index: 10;
        }
        
        .square.correct {
            animation: correctFlash 0.8s ease-out;
        }
        
        @keyframes correctFlash {
            0% { transform: scale(1); box-shadow: none; }
            50% { transform: scale(1.2); box-shadow: 0 0 30px #00ff80; background: #00ff80; }
            100% { transform: scale(1); box-shadow: none; }
        }
        
        .square.wrong {
            animation: wrongFlash 0.8s ease-out;
        }
        
        @keyframes wrongFlash {
            0% { transform: scale(1); box-shadow: none; }
            50% { transform: scale(1.2); box-shadow: 0 0 30px #ff0040; background: #ff0040; }
            100% { transform: scale(1); box-shadow: none; }
        }
        
        /* Coordinate labels for kids mode */
        .coordinate-label {
            font-size: 14px;
            font-weight: 900;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            pointer-events: none;
            user-select: none;
        }
        
        /* Control buttons */
        .game-controls {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .btn {
            padding: 0.8rem 1.5rem;
            font-size: 1rem;
            font-weight: 700;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            font-family: 'Orbitron', monospace;
        }
        
        .btn-primary {
            background: linear-gradient(45deg, #ff0080, #ff4040);
            color: white;
            box-shadow: 0 5px 20px rgba(255, 0, 128, 0.4);
        }
        
        .btn-secondary {
            background: transparent;
            color: #00ffff;
            border: 2px solid #00ffff;
            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.2);
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 30px rgba(255, 255, 255, 0.3);
        }
        
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* Game over screen */
        .game-over {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        
        .game-over-content {
            text-align: center;
            padding: 2rem;
            background: rgba(0, 0, 0, 0.8);
            border: 3px solid #ff0080;
            border-radius: 20px;
            box-shadow: 0 0 50px rgba(255, 0, 128, 0.5);
        }
        
        .game-over-title {
            font-size: 3rem;
            color: #ff0080;
            margin-bottom: 1rem;
            text-shadow: 0 0 20px rgba(255, 0, 128, 0.8);
        }
        
        .final-score {
            font-size: 1.5rem;
            color: #00ffff;
            margin-bottom: 2rem;
        }
        
        /* Progress bar */
        .progress-container {
            width: 100%;
            max-width: 600px;
            height: 20px;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
            margin-bottom: 1rem;
            overflow: hidden;
        }
        
        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #ff0080, #00ff80);
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 10px;
        }
        
        .progress-text {
            text-align: center;
            font-size: 0.9rem;
            color: #00ffff;
            margin-bottom: 1rem;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .game-title {
                font-size: 2rem;
            }
            
            .chess-board {
                grid-template-columns: repeat(8, 45px);
                grid-template-rows: repeat(8, 45px);
            }
            
            .target-coordinate {
                font-size: 3rem;
            }
            
            .timer {
                font-size: 2rem;
            }
            
            .game-ui {
                flex-direction: column;
                gap: 1rem;
            }
            
            .sound-toggle {
                width: 50px;
                height: 50px;
                font-size: 1.2rem;
            }
        }
        
        @media (max-width: 480px) {
            .chess-board {
                grid-template-columns: repeat(8, 35px);
                grid-template-rows: repeat(8, 35px);
            }
            
            .target-coordinate {
                font-size: 2.5rem;
            }
            
            .sound-toggle {
                top: 15px;
                right: 15px;
                width: 45px;
                height: 45px;
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <!-- Sound Toggle Button -->
        <div class="sound-toggle" id="soundToggle" title="Toggle Sound">
            🔊
        </div>
        
        <!-- Header -->
        <div class="game-header">
            <div class="game-title">🎯 SQUARE RUSH</div>
            <div class="game-subtitle">Find the coordinates like a chess master!</div>
        </div>
        
        <!-- Game UI -->
        <div class="game-ui">
            <div class="level-info">
                <div class="level-number" id="levelNumber">1</div>
                <div class="level-name" id="levelName">BABY STEPS</div>
            </div>
            
            <div class="timer" id="timer">5.0</div>
            
            <div class="score-info">
                <div class="score">Score: <span id="score">0</span></div>
                <div class="combo">Combo: x<span id="combo">1</span></div>
            </div>
        </div>
        
        <!-- Progress -->
        <div class="progress-container">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        <div class="progress-text" id="progressText">Find 5 squares to complete level 1</div>
        
        <!-- Target Display -->
        <div class="target-display">
            <div class="target-label">Click on square:</div>
            <div class="target-coordinate" id="targetCoordinate">A1</div>
        </div>
        
        <!-- Chess Board -->
        <div class="board-container">
            <div class="chess-board" id="chessBoard">
                <!-- Squares will be generated by JavaScript -->
            </div>
        </div>
        
        <!-- Controls -->
        <div class="game-controls">
            <button class="btn btn-primary" id="startBtn">START GAME</button>
            <button class="btn btn-secondary" id="pauseBtn" disabled>PAUSE</button>
            <button class="btn btn-secondary" id="helpBtn">SHOW COORDINATES</button>
        </div>
        
        <!-- Game Over Screen -->
        <div class="game-over" id="gameOverScreen">
            <div class="game-over-content">
                <div class="game-over-title" id="gameOverTitle">LEVEL COMPLETE!</div>
                <div class="final-score" id="finalScore">Score: 0</div>
                <button class="btn btn-primary" id="nextLevelBtn">NEXT LEVEL</button>
                <button class="btn btn-secondary" id="playAgainBtn">PLAY AGAIN</button>
            </div>
        </div>
    </div>
    
    <!-- Howler.js for audio -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>
    
    <script>
        // Game state
        let gameState = {
            level: 1,
            score: 0,
            combo: 1,
            currentTarget: '',
            targetFound: 0,
            targetsNeeded: 5,
            timeLeft: 12.0,
            gameActive: false,
            gameStarted: false,
            showCoordinates: true,
            timerInterval: null,
            soundEnabled: true // New sound state
        };
        
        // Level configuration
        const levels = {
            1: { name: "BABY STEPS", targets: 5, time: 12.0, theme: "retro" },
            2: { name: "BABY STEPS", targets: 5, time: 10.0, theme: "retro" },
            3: { name: "BABY STEPS", targets: 5, time: 8.0, theme: "retro" },
            4: { name: "LITTLE MASTER", targets: 8, time: 7.0, theme: "neon" },
            5: { name: "LITTLE MASTER", targets: 8, time: 6.0, theme: "neon" }
        };
        
        // Audio setup
        const sounds = {
            correct: new Howl({ 
                src: ['data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmckBTOLzu63dyMFl2us'],
                volume: 0.5
            }),
            wrong: new Howl({ 
                src: ['data:audio/wav;base64,UklGRhQDAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YfACAAC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4QEBAQEBAQEBAQEBAQEBAQEBAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4QEBAQEBAQEBAQEBAQEBAQEBA'],
                volume: 0.5
            }),
            levelUp: new Howl({ 
                src: ['data:audio/wav;base64,UklGRhQEAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YfADAADIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg'],
                volume: 0.7
            })
        };
        
        // Sound control functions
        function playSound(soundName) {
            if (gameState.soundEnabled && sounds[soundName]) {
                sounds[soundName].play();
            }
        }
        
        function toggleSound() {
            gameState.soundEnabled = !gameState.soundEnabled;
            const soundBtn = document.getElementById('soundToggle');
            
            if (gameState.soundEnabled) {
                soundBtn.textContent = '🔊';
                soundBtn.classList.remove('muted');
                soundBtn.title = 'Mute Sound';
                
                // Save preference
                localStorage.setItem('squareRushSound', 'enabled');
            } else {
                soundBtn.textContent = '🔇';
                soundBtn.classList.add('muted');
                soundBtn.title = 'Enable Sound';
                
                // Save preference
                localStorage.setItem('squareRushSound', 'disabled');
            }
        }
        
        // Load sound preference
        function loadSoundPreference() {
            const soundPref = localStorage.getItem('squareRushSound');
            if (soundPref === 'disabled') {
                gameState.soundEnabled = false;
                const soundBtn = document.getElementById('soundToggle');
                soundBtn.textContent = '🔇';
                soundBtn.classList.add('muted');
                soundBtn.title = 'Enable Sound';
            }
        }
        
        // Initialize game
        function initGame() {
            createBoard();
            updateUI();
            generateNewTarget();
            loadSoundPreference();
        }
        
        // Create chess board
        function createBoard() {
            const board = document.getElementById('chessBoard');
            board.innerHTML = '';
            
            // Board from white's perspective: rank 1 at bottom, rank 8 at top
            for (let row = 8; row >= 1; row--) {
                for (let col = 0; col < 8; col++) {
                    const square = document.createElement('div');
                    const file = String.fromCharCode(97 + col); // a-h
                    const rank = row.toString(); // 1-8
                    const coordinate = file + rank;
                    
                    // Standard chess board: A1 = dark, H1 = light (white square bottom-right)
                    const isLight = (col + parseInt(rank)) % 2 === 0;
                    square.className = `square ${isLight ? 'light' : 'dark'}`;
                    square.id = coordinate;
                    square.dataset.coordinate = coordinate;
                    
                    // Add coordinate labels for kids mode
                    if (gameState.showCoordinates) {
                        square.innerHTML = `<span class="coordinate-label">${coordinate.toUpperCase()}</span>`;
                    }
                    
                    square.addEventListener('click', () => handleSquareClick(coordinate));
                    board.appendChild(square);
                }
            }
        }
        
        // Handle square click
        function handleSquareClick(coordinate) {
            const square = document.getElementById(coordinate);
            
            // Game can start by clicking correct square in ALL levels
            if (!gameState.gameStarted) {
                if (coordinate === gameState.currentTarget) {
                    // Start the game!
                    gameState.gameStarted = true;
                    gameState.gameActive = true;
                    startTimer();
                    document.getElementById('startBtn').disabled = true;
                    document.getElementById('pauseBtn').disabled = false;
                    
                    // Handle this as first correct answer
                    square.classList.add('correct');
                    playSound('correct');
                    
                    gameState.targetFound++;
                    gameState.score += 100 * gameState.combo;
                    
                    if (gameState.combo < 3) {
                        gameState.combo++;
                    }
                    
                    // Check if level complete
                    if (gameState.targetFound >= gameState.targetsNeeded) {
                        completeLevel();
                    } else {
                        generateNewTarget();
                        resetTimer();
                    }
                    
                    updateUI();
                    
                    // Track game start
                    gtag('event', 'game_start_by_click', {
                        'level': gameState.level,
                        'first_coordinate': coordinate
                    });
                }
                // If wrong square clicked before game starts, do nothing
                return;
            }
            
            // Normal game logic (after game has started)
            if (!gameState.gameActive) return;
            
            if (coordinate === gameState.currentTarget) {
                // Correct answer
                square.classList.add('correct');
                playSound('correct');
                
                gameState.targetFound++;
                gameState.score += 100 * gameState.combo;
                
                // Update combo
                if (gameState.combo < 3) {
                    gameState.combo++;
                }
                
                // Check if level complete
                if (gameState.targetFound >= gameState.targetsNeeded) {
                    completeLevel();
                } else {
                    generateNewTarget();
                    resetTimer();
                }
                
                // Track event
                gtag('event', 'correct_answer', {
                    'level': gameState.level,
                    'coordinate': coordinate
                });
                
            } else {
                // Wrong answer
                square.classList.add('wrong');
                playSound('wrong');
                gameState.combo = 1;
                gameOver();
                
                // Track event
                gtag('event', 'wrong_answer', {
                    'level': gameState.level,
                    'coordinate': coordinate,
                    'target': gameState.currentTarget
                });
            }
            
            updateUI();
        }
        
        // Generate new target coordinate
        function generateNewTarget() {
            const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
            const ranks = ['1', '2', '3', '4', '5', '6', '7', '8'];
            
            let newTarget;
            do {
                const file = files[Math.floor(Math.random() * files.length)];
                const rank = ranks[Math.floor(Math.random() * ranks.length)];
                newTarget = file + rank;
            } while (newTarget === gameState.currentTarget);
            
            gameState.currentTarget = newTarget;
            document.getElementById('targetCoordinate').textContent = newTarget.toUpperCase();
        }
        
        // Start game timer
        function startTimer() {
            gameState.timerInterval = setInterval(() => {
                gameState.timeLeft -= 0.1;
                
                if (gameState.timeLeft <= 0) {
                    gameState.timeLeft = 0;
                    gameOver();
                }
                
                updateUI();
            }, 100);
        }
        
        // Reset timer
        function resetTimer() {
            clearInterval(gameState.timerInterval);
            gameState.timeLeft = levels[gameState.level].time;
            startTimer();
        }
        
        // Update UI
        function updateUI() {
            document.getElementById('levelNumber').textContent = gameState.level;
            document.getElementById('levelName').textContent = levels[gameState.level].name;
            document.getElementById('score').textContent = gameState.score;
            document.getElementById('combo').textContent = gameState.combo;
            document.getElementById('timer').textContent = gameState.timeLeft.toFixed(1);
            
            // Update progress
            const progress = (gameState.targetFound / gameState.targetsNeeded) * 100;
            document.getElementById('progressBar').style.width = progress + '%';
            document.getElementById('progressText').textContent = 
                `Find ${gameState.targetsNeeded - gameState.targetFound} more squares to complete level ${gameState.level}`;
        }
        
        // Complete level
        function completeLevel() {
            clearInterval(gameState.timerInterval);
            gameState.gameActive = false;
            
            playSound('levelUp');
            
            document.getElementById('gameOverTitle').textContent = 'LEVEL COMPLETE!';
            document.getElementById('finalScore').textContent = `Score: ${gameState.score}`;
            document.getElementById('gameOverScreen').style.display = 'flex';
            
            // Track completion
            gtag('event', 'level_complete', {
                'level': gameState.level,
                'score': gameState.score,
                'time': levels[gameState.level].time - gameState.timeLeft
            });
        }
        
        // Game over
        function gameOver() {
            clearInterval(gameState.timerInterval);
            gameState.gameActive = false;
            
            document.getElementById('gameOverTitle').textContent = 'GAME OVER!';
            document.getElementById('finalScore').textContent = `Final Score: ${gameState.score}`;
            document.getElementById('gameOverScreen').style.display = 'flex';
            
            // Track game over
            gtag('event', 'game_over', {
                'level': gameState.level,
                'score': gameState.score,
                'targets_found': gameState.targetFound
            });
        }
        
        // Start game
        function startGame() {
            gameState.gameStarted = true;
            gameState.gameActive = true;
            gameState.targetFound = 0;
            gameState.combo = 1;
            gameState.targetsNeeded = levels[gameState.level].targets;
            
            // NEVER generate new target - always keep the current one shown!
            // This prevents confusion when pressing START GAME
            
            resetTimer();
            updateUI();
            
            document.getElementById('startBtn').disabled = true;
            document.getElementById('pauseBtn').disabled = false;
            
            // Track game start
            gtag('event', 'game_start_button', {
                'level': gameState.level
            });
        }
        
        // Pause game
        function pauseGame() {
            if (gameState.gameActive) {
                clearInterval(gameState.timerInterval);
                gameState.gameActive = false;
                document.getElementById('pauseBtn').textContent = 'RESUME';
            } else {
                startTimer();
                gameState.gameActive = true;
                document.getElementById('pauseBtn').textContent = 'PAUSE';
            }
        }
        
        // Toggle coordinate display
        function toggleCoordinates() {
            gameState.showCoordinates = !gameState.showCoordinates;
            createBoard();
            document.getElementById('helpBtn').textContent = 
                gameState.showCoordinates ? 'HIDE COORDINATES' : 'SHOW COORDINATES';
        }
        
        // Next level
        function nextLevel() {
            if (gameState.level < Object.keys(levels).length) {
                gameState.level++;
                gameState.targetFound = 0;
                gameState.combo = 1;
                gameState.gameStarted = false;
                gameState.gameActive = false;
                document.getElementById('gameOverScreen').style.display = 'none';
                document.getElementById('startBtn').disabled = false;
                document.getElementById('pauseBtn').disabled = true;
                
                // Generate new target for next level
                generateNewTarget();
                gameState.timeLeft = levels[gameState.level].time;
                updateUI();
            }
        }
        
        // Play again
        function playAgain() {
            gameState.targetFound = 0;
            gameState.score = 0;
            gameState.combo = 1;
            gameState.gameStarted = false;
            gameState.gameActive = false;
            document.getElementById('gameOverScreen').style.display = 'none';
            document.getElementById('startBtn').disabled = false;
            document.getElementById('pauseBtn').disabled = true;
            
            // Generate new target for fresh start
            generateNewTarget();
            gameState.timeLeft = levels[gameState.level].time;
            updateUI();
        }
        
        // Event listeners
        document.getElementById('startBtn').addEventListener('click', startGame);
        document.getElementById('pauseBtn').addEventListener('click', pauseGame);
        document.getElementById('helpBtn').addEventListener('click', toggleCoordinates);
        document.getElementById('nextLevelBtn').addEventListener('click', nextLevel);
        document.getElementById('playAgainBtn').addEventListener('click', playAgain);
        document.getElementById('soundToggle').addEventListener('click', toggleSound);
        
        // Initialize when page loads
        window.addEventListener('load', initGame);
        
        // Prevent context menu on mobile
        document.addEventListener('contextmenu', e => e.preventDefault());
        
        // Clean up animations after they complete
        document.addEventListener('animationend', (e) => {
            if (e.target.classList.contains('correct') || e.target.classList.contains('wrong')) {
                e.target.classList.remove('correct', 'wrong');
            }
        });
    </script>
</body>
</html>